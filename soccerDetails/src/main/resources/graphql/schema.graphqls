type Query {
  footballers: [Footballer]
  footballerById(id: ID!): Footballer
  strikers(player: FootballerInput!): [Footballer]
  goalkeepers(player:FootballerInput!): [Footballer]

  clubs: [Club]
  clubById(id: ID!): Club
  clubByStadium(club: ClubInput!): Club
  clubByName(club: ClubInput!): Club
}

type Mutation {
  addReview(player: FootballerInput!, review: ReviewInput!): Footballer
  addFootballer(footballer: FootballerInput!): Footballer
  updateFootballerAttributes(attribute: FootballerAttributesEnum!): Footballer
  deleteFootballerById(id: ID!): Footballer

  addClub(club: ClubInput!): Club
 # updateClub():
  deleteClubById(id: ID!): Club

}

type Footballer {
  id: ID!
  firstname: String!
  lastname: String!
  role: [FootballerRoleEnum!]!
  attribute: [FootballerAttributesEnum!]!
  score: Float!
  age: Int!
  salary: Int!
  height: Float!
  nationality: String!
  club: Club
}

input FootballerInput{
  firstname: String!
  lastname: String!
  club: ClubInput
}

input ReviewInput{
  body: String
}

type Club {
  id: ID!
  name: String!
  city: String!
  country: String
  league: String!
  stadium: String!
  numberOfTrophy: Int!
  coach: String!
  Footballers: [Footballer]!
}

input ClubInput{
  name: String!
  stadium: String!
  league: String!
}

enum FootballerAttributesEnum{
  PAC # Pace
  SHO # Shooting
  PAS # Passing
  DRI # Dribbling
  DEF # Defence
  PHY # Physical
}

enum FootballerRoleEnum {
  LW # Left Wing
  ST # Striker
  CF # Centre Forward
  RW # Right Wing
  RM # Right Midfielder
  CM # Centre Midfielder
  CAM # Central Attacking Midfielder
  CDM # Centre Defense Midfielder
  LM # Left Midfielder
  RB # Right Back
  CB # Centre Back
  LB # Left Back
  GK # GoalKeeper
}


