type Query {
  SoccerPlayerById(id: ID): SoccerPlayer
}

#return array of strikers
query Strikers($role: Role!, $withClub: Boolean!) {
  soccerPlayers(role: $role) {
    firstname
    lastname
    club @include(if: $withClub) {
      name
    }
  }
}

query SoccerPlayerNameAndClub($id: Int!, $withClub: Boolean!) {
  soccerPlayer(id: $id) {
    firstname
    lastname
    club @include(if: $withClub) {
      name
    }
  }
}

mutation CreateReviewForPlayer($player: SoccerPlayer!, $review: ReviewInput!) {
  createReview(soccerPlayer: $player, review: $review) {
    stars
    commentary
  }
}

type SoccerPlayer {
  id: ID!
  firstname: String!
  lastname: String!
  role: soccerPlayerRoleEnum!
  score: Int!
  age: Int!
  nationality: String!
  club: Club
}

type Club {
  id: ID!
  name: String!
  city: String!
  league: String!
  country: String!
  stadium: String!
  numberOfTrophy: Int!
  coach: String!
  soccerPlayers: [SoccerPlayer]!
}

enum soccerPlayerRoleEnum {
  LW # Left Wing
  ST #Striker
  CF #Centre Forward
  RW # Right Wing
  RM # Right Midfielder
  CM # Centre Midfielder
  CAM #Central Attacking Midfielder
  CDM #Centre Defense Midfielder
  LM # Left Midfielder
  RB #Right Back
  CB #Centre Back
  LB #Left Back
  GK #GoalKeeper
}
